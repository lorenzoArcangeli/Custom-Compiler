// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-AB8JRUCB
// DateTime: 16/12/2023 17:48:32
// UserName: loren
// Input file <parser.y - 16/12/2023 17:31:08>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Parser
{
public enum Tokens {error=2,EOF=3,INTVALUE=4,BOOLVALUE=5,ID=6,
    ERR=7,COMMA=8,SEMI=9,LPAR=10,RPAR=11,LBRA=12,
    RBRA=13,ASN=14,OR=15,AND=16,EQ=17,NEQ=18,
    LES=19,GRE=20,LESE=21,GREE=22,ADD=23,SUB=24,
    MUL=25,DIV=26,NEG=27,VOID=28,INT=29,BOOL=30,
    IF=31,ELSE=32,WHILE=33,RETURN=34};

public struct ValueType
#line 5 "parser.y"
       {
public string Value;
public Expression Expression;
public Statement Statement;
public Type Type;
public Program Program;
public FunctionDeclaration FunctionDeclaration;
public VariableDeclaration VariableDeclaration;
public List<VariableDeclaration> VariableDeclarationList;
public List<Statement> StatementList;
public List<Expression> ExpressionList;
public List<FunctionDeclaration> FunctionalDeclarationList; 
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[56];
  private static State[] states = new State[110];
  private static string[] nonTerms = new string[] {
      "DeclList", "Decl", "Type", "Stmt", "Expr", "Expr1", "Expr2", "Expr3", 
      "Expr4", "Expr5", "Expr6", "Expr7", "Expr8", "Expr9", "FormalRest", "FormalList", 
      "StmtList", "ExprList", "ExprRest", "Program", "$accept", };

  static Parser() {
    states[0] = new State(-4,new int[]{-20,1,-1,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,4,29,93,30,94,28,102},new int[]{-2,5,-3,6});
    states[4] = new State(-2);
    states[5] = new State(-3);
    states[6] = new State(new int[]{6,7});
    states[7] = new State(new int[]{10,8});
    states[8] = new State(new int[]{29,93,30,94,11,-8},new int[]{-16,9,-3,95});
    states[9] = new State(new int[]{11,10});
    states[10] = new State(new int[]{12,11});
    states[11] = new State(-14,new int[]{-17,12});
    states[12] = new State(new int[]{13,13,12,15,31,18,33,25,34,30,6,34,27,50,24,52,4,55,5,56,10,77,29,93,30,94},new int[]{-4,14,-5,88,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76,-3,90});
    states[13] = new State(-5);
    states[14] = new State(-13);
    states[15] = new State(-14,new int[]{-17,16});
    states[16] = new State(new int[]{13,17,12,15,31,18,33,25,34,30,6,34,27,50,24,52,4,55,5,56,10,77,29,93,30,94},new int[]{-4,14,-5,88,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76,-3,90});
    states[17] = new State(-15);
    states[18] = new State(new int[]{10,19});
    states[19] = new State(new int[]{6,34,27,50,24,52,4,55,5,56,10,77},new int[]{-5,20,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[20] = new State(new int[]{11,21});
    states[21] = new State(new int[]{12,15,31,18,33,25,34,30,6,34,27,50,24,52,4,55,5,56,10,77,29,93,30,94},new int[]{-4,22,-5,88,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76,-3,90});
    states[22] = new State(new int[]{32,23,13,-16,12,-16,31,-16,33,-16,34,-16,6,-16,27,-16,24,-16,4,-16,5,-16,10,-16,29,-16,30,-16});
    states[23] = new State(new int[]{12,15,31,18,33,25,34,30,6,34,27,50,24,52,4,55,5,56,10,77,29,93,30,94},new int[]{-4,24,-5,88,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76,-3,90});
    states[24] = new State(-17);
    states[25] = new State(new int[]{10,26});
    states[26] = new State(new int[]{6,34,27,50,24,52,4,55,5,56,10,77},new int[]{-5,27,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[27] = new State(new int[]{11,28});
    states[28] = new State(new int[]{12,15,31,18,33,25,34,30,6,34,27,50,24,52,4,55,5,56,10,77,29,93,30,94},new int[]{-4,29,-5,88,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76,-3,90});
    states[29] = new State(-18);
    states[30] = new State(new int[]{9,33,6,34,27,50,24,52,4,55,5,56,10,77},new int[]{-5,31,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[31] = new State(new int[]{9,32});
    states[32] = new State(-19);
    states[33] = new State(-20);
    states[34] = new State(new int[]{14,35,10,58,25,-48,26,-48,23,-48,24,-48,19,-48,20,-48,21,-48,22,-48,17,-48,18,-48,16,-48,15,-48,9,-48,11,-48,8,-48});
    states[35] = new State(new int[]{6,34,27,50,24,52,4,55,5,56,10,77},new int[]{-5,36,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[36] = new State(-23);
    states[37] = new State(new int[]{15,38,9,-24,11,-24,8,-24});
    states[38] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-7,39,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[39] = new State(new int[]{16,40,15,-25,9,-25,11,-25,8,-25});
    states[40] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-8,41,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[41] = new State(new int[]{17,42,18,68,16,-27,15,-27,9,-27,11,-27,8,-27});
    states[42] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-9,43,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[43] = new State(new int[]{19,44,20,70,21,81,22,85,17,-29,18,-29,16,-29,15,-29,9,-29,11,-29,8,-29});
    states[44] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-10,45,-11,83,-12,84,-13,54,-14,76});
    states[45] = new State(new int[]{23,46,24,72,19,-32,20,-32,21,-32,22,-32,17,-32,18,-32,16,-32,15,-32,9,-32,11,-32,8,-32});
    states[46] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-11,47,-12,84,-13,54,-14,76});
    states[47] = new State(new int[]{25,48,26,74,23,-37,24,-37,19,-37,20,-37,21,-37,22,-37,17,-37,18,-37,16,-37,15,-37,9,-37,11,-37,8,-37});
    states[48] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-12,49,-13,54,-14,76});
    states[49] = new State(-40);
    states[50] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-12,51,-13,54,-14,76});
    states[51] = new State(-43);
    states[52] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-12,53,-13,54,-14,76});
    states[53] = new State(-44);
    states[54] = new State(-45);
    states[55] = new State(-46);
    states[56] = new State(-47);
    states[57] = new State(new int[]{10,58,25,-48,26,-48,23,-48,24,-48,19,-48,20,-48,21,-48,22,-48,17,-48,18,-48,16,-48,15,-48,9,-48,11,-48,8,-48});
    states[58] = new State(new int[]{6,34,27,50,24,52,4,55,5,56,10,77,11,-53},new int[]{-18,59,-5,61,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[59] = new State(new int[]{11,60});
    states[60] = new State(-50);
    states[61] = new State(new int[]{8,63,11,-55},new int[]{-19,62});
    states[62] = new State(-52);
    states[63] = new State(new int[]{6,34,27,50,24,52,4,55,5,56,10,77},new int[]{-5,64,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[64] = new State(new int[]{8,63,11,-55},new int[]{-19,65});
    states[65] = new State(-54);
    states[66] = new State(new int[]{16,40,15,-26,9,-26,11,-26,8,-26});
    states[67] = new State(new int[]{17,42,18,68,16,-28,15,-28,9,-28,11,-28,8,-28});
    states[68] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-9,69,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[69] = new State(new int[]{19,44,20,70,21,81,22,85,17,-30,18,-30,16,-30,15,-30,9,-30,11,-30,8,-30});
    states[70] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-10,71,-11,83,-12,84,-13,54,-14,76});
    states[71] = new State(new int[]{23,46,24,72,19,-33,20,-33,21,-33,22,-33,17,-33,18,-33,16,-33,15,-33,9,-33,11,-33,8,-33});
    states[72] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-11,73,-12,84,-13,54,-14,76});
    states[73] = new State(new int[]{25,48,26,74,23,-38,24,-38,19,-38,20,-38,21,-38,22,-38,17,-38,18,-38,16,-38,15,-38,9,-38,11,-38,8,-38});
    states[74] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-12,75,-13,54,-14,76});
    states[75] = new State(-41);
    states[76] = new State(-49);
    states[77] = new State(new int[]{6,34,27,50,24,52,4,55,5,56,10,77},new int[]{-5,78,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76});
    states[78] = new State(new int[]{11,79});
    states[79] = new State(-51);
    states[80] = new State(new int[]{19,44,20,70,21,81,22,85,17,-31,18,-31,16,-31,15,-31,9,-31,11,-31,8,-31});
    states[81] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-10,82,-11,83,-12,84,-13,54,-14,76});
    states[82] = new State(new int[]{23,46,24,72,19,-34,20,-34,21,-34,22,-34,17,-34,18,-34,16,-34,15,-34,9,-34,11,-34,8,-34});
    states[83] = new State(new int[]{25,48,26,74,23,-39,24,-39,19,-39,20,-39,21,-39,22,-39,17,-39,18,-39,16,-39,15,-39,9,-39,11,-39,8,-39});
    states[84] = new State(-42);
    states[85] = new State(new int[]{27,50,24,52,4,55,5,56,6,57,10,77},new int[]{-10,86,-11,83,-12,84,-13,54,-14,76});
    states[86] = new State(new int[]{23,46,24,72,19,-35,20,-35,21,-35,22,-35,17,-35,18,-35,16,-35,15,-35,9,-35,11,-35,8,-35});
    states[87] = new State(new int[]{23,46,24,72,19,-36,20,-36,21,-36,22,-36,17,-36,18,-36,16,-36,15,-36,9,-36,11,-36,8,-36});
    states[88] = new State(new int[]{9,89});
    states[89] = new State(-21);
    states[90] = new State(new int[]{6,91});
    states[91] = new State(new int[]{9,92});
    states[92] = new State(-22);
    states[93] = new State(-11);
    states[94] = new State(-12);
    states[95] = new State(new int[]{6,96});
    states[96] = new State(new int[]{8,98,11,-10},new int[]{-15,97});
    states[97] = new State(-7);
    states[98] = new State(new int[]{29,93,30,94},new int[]{-3,99});
    states[99] = new State(new int[]{6,100});
    states[100] = new State(new int[]{8,98,11,-10},new int[]{-15,101});
    states[101] = new State(-9);
    states[102] = new State(new int[]{6,103});
    states[103] = new State(new int[]{10,104});
    states[104] = new State(new int[]{29,93,30,94,11,-8},new int[]{-16,105,-3,95});
    states[105] = new State(new int[]{11,106});
    states[106] = new State(new int[]{12,107});
    states[107] = new State(-14,new int[]{-17,108});
    states[108] = new State(new int[]{13,109,12,15,31,18,33,25,34,30,6,34,27,50,24,52,4,55,5,56,10,77,29,93,30,94},new int[]{-4,14,-5,88,-6,37,-7,66,-8,67,-9,80,-10,87,-11,83,-12,84,-13,54,-14,76,-3,90});
    states[109] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-21, new int[]{-20,3});
    rules[2] = new Rule(-20, new int[]{-1,3});
    rules[3] = new Rule(-1, new int[]{-1,-2});
    rules[4] = new Rule(-1, new int[]{});
    rules[5] = new Rule(-2, new int[]{-3,6,10,-16,11,12,-17,13});
    rules[6] = new Rule(-2, new int[]{28,6,10,-16,11,12,-17,13});
    rules[7] = new Rule(-16, new int[]{-3,6,-15});
    rules[8] = new Rule(-16, new int[]{});
    rules[9] = new Rule(-15, new int[]{8,-3,6,-15});
    rules[10] = new Rule(-15, new int[]{});
    rules[11] = new Rule(-3, new int[]{29});
    rules[12] = new Rule(-3, new int[]{30});
    rules[13] = new Rule(-17, new int[]{-17,-4});
    rules[14] = new Rule(-17, new int[]{});
    rules[15] = new Rule(-4, new int[]{12,-17,13});
    rules[16] = new Rule(-4, new int[]{31,10,-5,11,-4});
    rules[17] = new Rule(-4, new int[]{31,10,-5,11,-4,32,-4});
    rules[18] = new Rule(-4, new int[]{33,10,-5,11,-4});
    rules[19] = new Rule(-4, new int[]{34,-5,9});
    rules[20] = new Rule(-4, new int[]{34,9});
    rules[21] = new Rule(-4, new int[]{-5,9});
    rules[22] = new Rule(-4, new int[]{-3,6,9});
    rules[23] = new Rule(-5, new int[]{6,14,-5});
    rules[24] = new Rule(-5, new int[]{-6});
    rules[25] = new Rule(-6, new int[]{-6,15,-7});
    rules[26] = new Rule(-6, new int[]{-7});
    rules[27] = new Rule(-7, new int[]{-7,16,-8});
    rules[28] = new Rule(-7, new int[]{-8});
    rules[29] = new Rule(-8, new int[]{-8,17,-9});
    rules[30] = new Rule(-8, new int[]{-8,18,-9});
    rules[31] = new Rule(-8, new int[]{-9});
    rules[32] = new Rule(-9, new int[]{-9,19,-10});
    rules[33] = new Rule(-9, new int[]{-9,20,-10});
    rules[34] = new Rule(-9, new int[]{-9,21,-10});
    rules[35] = new Rule(-9, new int[]{-9,22,-10});
    rules[36] = new Rule(-9, new int[]{-10});
    rules[37] = new Rule(-10, new int[]{-10,23,-11});
    rules[38] = new Rule(-10, new int[]{-10,24,-11});
    rules[39] = new Rule(-10, new int[]{-11});
    rules[40] = new Rule(-11, new int[]{-11,25,-12});
    rules[41] = new Rule(-11, new int[]{-11,26,-12});
    rules[42] = new Rule(-11, new int[]{-12});
    rules[43] = new Rule(-12, new int[]{27,-12});
    rules[44] = new Rule(-12, new int[]{24,-12});
    rules[45] = new Rule(-12, new int[]{-13});
    rules[46] = new Rule(-13, new int[]{4});
    rules[47] = new Rule(-13, new int[]{5});
    rules[48] = new Rule(-13, new int[]{6});
    rules[49] = new Rule(-13, new int[]{-14});
    rules[50] = new Rule(-14, new int[]{6,10,-18,11});
    rules[51] = new Rule(-14, new int[]{10,-5,11});
    rules[52] = new Rule(-18, new int[]{-5,-19});
    rules[53] = new Rule(-18, new int[]{});
    rules[54] = new Rule(-19, new int[]{8,-5,-19});
    rules[55] = new Rule(-19, new int[]{});

    aliases = new Dictionary<int, string>();
    aliases.Add(8, ",");
    aliases.Add(9, ";");
    aliases.Add(10, "(");
    aliases.Add(11, ")");
    aliases.Add(12, "{");
    aliases.Add(13, "}");
    aliases.Add(14, "=");
    aliases.Add(15, "||");
    aliases.Add(16, "&&");
    aliases.Add(17, "==");
    aliases.Add(18, "!=");
    aliases.Add(19, "<");
    aliases.Add(20, ">");
    aliases.Add(21, "<=");
    aliases.Add(22, ">=");
    aliases.Add(23, "+");
    aliases.Add(24, "-");
    aliases.Add(25, "*");
    aliases.Add(26, "/");
    aliases.Add(27, "!");
    aliases.Add(28, "void");
    aliases.Add(29, "int");
    aliases.Add(30, "bool");
    aliases.Add(31, "if");
    aliases.Add(32, "else");
    aliases.Add(33, "while");
    aliases.Add(34, "return");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> DeclList, EOF
#line 67 "parser.y"
                       {Program = new Program(ValueStack[ValueStack.Depth-2].FunctionalDeclarationList);}
#line default
        break;
      case 3: // DeclList -> DeclList, Decl
#line 70 "parser.y"
                         { ValueStack[ValueStack.Depth-2].FunctionalDeclarationList.Add(ValueStack[ValueStack.Depth-1].FunctionDeclaration); CurrentSemanticValue.FunctionalDeclarationList=ValueStack[ValueStack.Depth-2].FunctionalDeclarationList;}
#line default
        break;
      case 4: // DeclList -> /* empty */
#line 71 "parser.y"
          { CurrentSemanticValue.FunctionalDeclarationList = new List<FunctionDeclaration>(); }
#line default
        break;
      case 5: // Decl -> Type, ID, "(", FormalList, ")", "{", StmtList, "}"
#line 74 "parser.y"
                                                   { CurrentSemanticValue.FunctionDeclaration = new FunctionDeclaration(ValueStack[ValueStack.Depth-8].Type, ValueStack[ValueStack.Depth-7].Value, ValueStack[ValueStack.Depth-5].VariableDeclarationList, ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.FunctionDeclaration.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 6: // Decl -> "void", ID, "(", FormalList, ")", "{", StmtList, "}"
#line 75 "parser.y"
                                                       { CurrentSemanticValue.FunctionDeclaration = new FunctionDeclaration(Type.VOID, ValueStack[ValueStack.Depth-7].Value, ValueStack[ValueStack.Depth-5].VariableDeclarationList, ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.FunctionDeclaration.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 7: // FormalList -> Type, ID, FormalRest
#line 78 "parser.y"
                                { ValueStack[ValueStack.Depth-1].VariableDeclarationList.Add(new VariableDeclaration(ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Value)); ValueStack[ValueStack.Depth-1].VariableDeclarationList.Reverse(); CurrentSemanticValue.VariableDeclarationList=ValueStack[ValueStack.Depth-1].VariableDeclarationList;}
#line default
        break;
      case 8: // FormalList -> /* empty */
#line 79 "parser.y"
          { CurrentSemanticValue.VariableDeclarationList = new List<VariableDeclaration>(); }
#line default
        break;
      case 9: // FormalRest -> ",", Type, ID, FormalRest
#line 82 "parser.y"
                                    { ValueStack[ValueStack.Depth-1].VariableDeclarationList.Add(new VariableDeclaration(ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Value)); CurrentSemanticValue.VariableDeclarationList=ValueStack[ValueStack.Depth-1].VariableDeclarationList; }
#line default
        break;
      case 10: // FormalRest -> /* empty */
#line 83 "parser.y"
          { CurrentSemanticValue.VariableDeclarationList = new List<VariableDeclaration>(); }
#line default
        break;
      case 11: // Type -> "int"
#line 86 "parser.y"
             { CurrentSemanticValue.Type = Type.INT; }
#line default
        break;
      case 12: // Type -> "bool"
#line 87 "parser.y"
                { CurrentSemanticValue.Type = Type.BOOL;}
#line default
        break;
      case 13: // StmtList -> StmtList, Stmt
#line 90 "parser.y"
                         { ValueStack[ValueStack.Depth-2].StatementList.Add(ValueStack[ValueStack.Depth-1].Statement); CurrentSemanticValue.StatementList=ValueStack[ValueStack.Depth-2].StatementList;}
#line default
        break;
      case 14: // StmtList -> /* empty */
#line 91 "parser.y"
          { CurrentSemanticValue.StatementList = new List<Statement>(); }
#line default
        break;
      case 15: // Stmt -> "{", StmtList, "}"
#line 94 "parser.y"
                        { CurrentSemanticValue.Statement = new BlockStatement(ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.Statement.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 16: // Stmt -> "if", "(", Expr, ")", Stmt
#line 95 "parser.y"
                                { CurrentSemanticValue.Statement = new IfStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement, null);CurrentSemanticValue.Statement.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 17: // Stmt -> "if", "(", Expr, ")", Stmt, "else", Stmt
#line 96 "parser.y"
                                             { CurrentSemanticValue.Statement = new IfStatement(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Statement, ValueStack[ValueStack.Depth-1].Statement);CurrentSemanticValue.Statement.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 18: // Stmt -> "while", "(", Expr, ")", Stmt
#line 97 "parser.y"
                                   { CurrentSemanticValue.Statement = new WhileStatement(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);CurrentSemanticValue.Statement.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 19: // Stmt -> "return", Expr, ";"
#line 98 "parser.y"
                           { CurrentSemanticValue.Statement = new ReturnStatement(ValueStack[ValueStack.Depth-2].Expression);CurrentSemanticValue.Statement.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 20: // Stmt -> "return", ";"
#line 99 "parser.y"
                      { CurrentSemanticValue.Statement = new ReturnStatement(null);CurrentSemanticValue.Statement.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 21: // Stmt -> Expr, ";"
#line 100 "parser.y"
                  { CurrentSemanticValue.Statement = new ExpressionStatement(ValueStack[ValueStack.Depth-2].Expression);CurrentSemanticValue.Statement.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 22: // Stmt -> Type, ID, ";"
#line 101 "parser.y"
                     { CurrentSemanticValue.Statement = new VariableDeclarationStatement(ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Value);CurrentSemanticValue.Statement.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 23: // Expr -> ID, "=", Expr
#line 105 "parser.y"
                   { CurrentSemanticValue.Expression = new AssignmentExpression(ValueStack[ValueStack.Depth-3].Value, ValueStack[ValueStack.Depth-1].Expression);CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 24: // Expr -> Expr1
#line 106 "parser.y"
               {CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;}
#line default
        break;
      case 25: // Expr1 -> Expr1, "||", Expr2
#line 109 "parser.y"
                         { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.OR, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 26: // Expr1 -> Expr2
#line 110 "parser.y"
               {CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;}
#line default
        break;
      case 27: // Expr2 -> Expr2, "&&", Expr3
#line 113 "parser.y"
                         { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.AND, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 28: // Expr2 -> Expr3
#line 114 "parser.y"
               {CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;}
#line default
        break;
      case 29: // Expr3 -> Expr3, "==", Expr4
#line 117 "parser.y"
                         { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.EQ, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 30: // Expr3 -> Expr3, "!=", Expr4
#line 118 "parser.y"
                          { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.NEQ, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 31: // Expr3 -> Expr4
#line 119 "parser.y"
               {CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;}
#line default
        break;
      case 32: // Expr4 -> Expr4, "<", Expr5
#line 122 "parser.y"
                        { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.LES, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 33: // Expr4 -> Expr4, ">", Expr5
#line 123 "parser.y"
                         { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.GRE, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 34: // Expr4 -> Expr4, "<=", Expr5
#line 124 "parser.y"
                          { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.LESE, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 35: // Expr4 -> Expr4, ">=", Expr5
#line 125 "parser.y"
                          { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.GREE, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 36: // Expr4 -> Expr5
#line 126 "parser.y"
               {CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;}
#line default
        break;
      case 37: // Expr5 -> Expr5, "+", Expr6
#line 129 "parser.y"
                        { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.ADD, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 38: // Expr5 -> Expr5, "-", Expr6
#line 130 "parser.y"
                         { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.SUB, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 39: // Expr5 -> Expr6
#line 131 "parser.y"
               {CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;}
#line default
        break;
      case 40: // Expr6 -> Expr6, "*", Expr7
#line 134 "parser.y"
                        { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.MUL, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 41: // Expr6 -> Expr6, "/", Expr7
#line 135 "parser.y"
                         { CurrentSemanticValue.Expression = new BinaryOperatorExpression(BinaryOperatorExpression.OperatorType.DIV, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan); }
#line default
        break;
      case 42: // Expr6 -> Expr7
#line 136 "parser.y"
               {CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;}
#line default
        break;
      case 43: // Expr7 -> "!", Expr7
#line 139 "parser.y"
                  { CurrentSemanticValue.Expression = new UnaryOperatorExpression(UnaryOperatorExpression.OperatorType.NEG, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 44: // Expr7 -> "-", Expr7
#line 140 "parser.y"
                   { CurrentSemanticValue.Expression = new UnaryOperatorExpression(UnaryOperatorExpression.OperatorType.NOT, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 45: // Expr7 -> Expr8
#line 141 "parser.y"
               {CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression;}
#line default
        break;
      case 46: // Expr8 -> INTVALUE
#line 144 "parser.y"
                 { CurrentSemanticValue.Expression = new IntegerLiteralExpression(ValueStack[ValueStack.Depth-1].Value); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 47: // Expr8 -> BOOLVALUE
#line 145 "parser.y"
                  { CurrentSemanticValue.Expression = new BooleanLiteralExpression(ValueStack[ValueStack.Depth-1].Value); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 48: // Expr8 -> ID
#line 146 "parser.y"
           { CurrentSemanticValue.Expression = new VariableExpression(ValueStack[ValueStack.Depth-1].Value); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 49: // Expr8 -> Expr9
#line 147 "parser.y"
              {CurrentSemanticValue.Expression=ValueStack[ValueStack.Depth-1].Expression; CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 50: // Expr9 -> ID, "(", ExprList, ")"
#line 150 "parser.y"
                            { CurrentSemanticValue.Expression = new FunctionCallExpression(ValueStack[ValueStack.Depth-4].Value, ValueStack[ValueStack.Depth-2].ExpressionList); CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 51: // Expr9 -> "(", Expr, ")"
#line 151 "parser.y"
                     { CurrentSemanticValue.Expression= ValueStack[ValueStack.Depth-2].Expression; CurrentSemanticValue.Expression.SetLocation(CurrentLocationSpan);}
#line default
        break;
      case 52: // ExprList -> Expr, ExprRest
#line 154 "parser.y"
                         {ValueStack[ValueStack.Depth-1].ExpressionList.Add(ValueStack[ValueStack.Depth-2].Expression); ValueStack[ValueStack.Depth-1].ExpressionList.Reverse(); CurrentSemanticValue.ExpressionList=ValueStack[ValueStack.Depth-1].ExpressionList;}
#line default
        break;
      case 53: // ExprList -> /* empty */
#line 155 "parser.y"
          { CurrentSemanticValue.ExpressionList = new List<Expression>(); }
#line default
        break;
      case 54: // ExprRest -> ",", Expr, ExprRest
#line 158 "parser.y"
                             {ValueStack[ValueStack.Depth-1].ExpressionList.Add(ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.ExpressionList=ValueStack[ValueStack.Depth-1].ExpressionList;}
#line default
        break;
      case 55: // ExprRest -> /* empty */
#line 159 "parser.y"
          { CurrentSemanticValue.ExpressionList = new List<Expression>(); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 164 "parser.y"
public Program Program;
public Parser( Scanner s ) : base( s ) { }
#line default
}
}
